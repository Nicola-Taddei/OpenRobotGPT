// Generated by gencpp from file gymnasium_env/StateReward.msg
// DO NOT EDIT!


#ifndef GYMNASIUM_ENV_MESSAGE_STATEREWARD_H
#define GYMNASIUM_ENV_MESSAGE_STATEREWARD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gymnasium_env
{
template <class ContainerAllocator>
struct StateReward_
{
  typedef StateReward_<ContainerAllocator> Type;

  StateReward_()
    : state()
    , info()
    , reward(0.0)
    , terminal(false)  {
    }
  StateReward_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , info(_alloc)
    , reward(0.0)
    , terminal(false)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _state_type;
  _state_type state;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _info_type;
  _info_type info;

   typedef float _reward_type;
  _reward_type reward;

   typedef uint8_t _terminal_type;
  _terminal_type terminal;





  typedef boost::shared_ptr< ::gymnasium_env::StateReward_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gymnasium_env::StateReward_<ContainerAllocator> const> ConstPtr;

}; // struct StateReward_

typedef ::gymnasium_env::StateReward_<std::allocator<void> > StateReward;

typedef boost::shared_ptr< ::gymnasium_env::StateReward > StateRewardPtr;
typedef boost::shared_ptr< ::gymnasium_env::StateReward const> StateRewardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gymnasium_env::StateReward_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gymnasium_env::StateReward_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gymnasium_env::StateReward_<ContainerAllocator1> & lhs, const ::gymnasium_env::StateReward_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.info == rhs.info &&
    lhs.reward == rhs.reward &&
    lhs.terminal == rhs.terminal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gymnasium_env::StateReward_<ContainerAllocator1> & lhs, const ::gymnasium_env::StateReward_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gymnasium_env

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gymnasium_env::StateReward_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gymnasium_env::StateReward_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gymnasium_env::StateReward_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gymnasium_env::StateReward_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gymnasium_env::StateReward_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gymnasium_env::StateReward_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gymnasium_env::StateReward_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df77cdff2c07bc1682dbb96fddaaf25c";
  }

  static const char* value(const ::gymnasium_env::StateReward_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf77cdff2c07bc16ULL;
  static const uint64_t static_value2 = 0x82dbb96fddaaf25cULL;
};

template<class ContainerAllocator>
struct DataType< ::gymnasium_env::StateReward_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gymnasium_env/StateReward";
  }

  static const char* value(const ::gymnasium_env::StateReward_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gymnasium_env::StateReward_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Credits: RL ROS package\n"
"# Message for returning the current sensation vector \n"
"# (i.e. state or observation or sensor readings) and a\n"
"# reward from an  environment\n"
"\n"
"float32[] state\n"
"float32[] info\n"
"float32 reward\n"
"bool terminal\n"
;
  }

  static const char* value(const ::gymnasium_env::StateReward_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gymnasium_env::StateReward_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.info);
      stream.next(m.reward);
      stream.next(m.terminal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateReward_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gymnasium_env::StateReward_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gymnasium_env::StateReward_<ContainerAllocator>& v)
  {
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.state[i]);
    }
    s << indent << "info[]" << std::endl;
    for (size_t i = 0; i < v.info.size(); ++i)
    {
      s << indent << "  info[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.info[i]);
    }
    s << indent << "reward: ";
    Printer<float>::stream(s, indent + "  ", v.reward);
    s << indent << "terminal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.terminal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GYMNASIUM_ENV_MESSAGE_STATEREWARD_H
