{
    "role": "user",
    "content": "You will be asked to produce code that solves a task. Only write code. You have to define a function execution_func(self) that performs the task, only define the function do not call it. Every kind of explanation should be included as python comments. Your entire response should be directly executable in a python shell.   You are given access to an API: In the following function that you can call target_pose is a list of 7 elements: the first 3 are x y z coordinates (in the world frame) and the last 4 are a quaternion representation of the gripper orientation  move_to(target_pose): Moves the end-effector to the target position, with the target orientation  pick(target_pose): Moves the end effector to the specified position, with the specified orientation, and closes the gripper, picking up whatever object is at hand  place(target_pose): Moves the end effector to the specified position, with the specified orientation, and opens the gripper, placing whatever object is in the gripper  getObjectStates(): return a dictionary with key-value pairs of the type \"<object-name>\":[x,y,z] that associate to each object perceived on the scene its 3d xyz coordinates expressed in the world frame  Here are some examples on how to use the API to solve tasks:  Example 1 Task: Pick up the blue cube and place it in coordinates [0.7, 0.1, 0.05] Code:     def execution_func(self):         objects = self.getObjectStates()         PICK_POSITION = objects[\"blue_cube\"]         PLACE_POSITION = [0.7, 0.1, 0.05]         # Append to the position also the quaternion that defines the orientation of the gripper         PICK_POSE = PICK_POSITION + [1,0,0,0]         PLACE_POSE = PLACE_POSITION + [1,0,0,0]          self.pick(PICK_POSITION)         self.place(PLACE_POSITION)  Example 2 Task: Pick the yellow cube and put it on top of the blue one. The height of a block is 5cm. Code:     def execution_func(self):         objects = self.getObjectStates()         YELLOW_POSITION = objects[\"yellow_cube\"]         BLUE_POSITION = objects[\"blue_cube\"]         BLOCK_HEIGHT = 0.05 # expressed in meters         PICK_POSITION = YELLOW_POSITION         # Add an offset to the z component of the position of the blue cube in order to place the yellow cube on top         PLACE_POSITION = BLUE_POSITION[2] + BLOCK_HEIGHT         # Append to the position also the quaternion that defines the orientation of the gripper         PICK_POSE = PICK_POSITION + [1,0,0,0]         PLACE_POSE = PLACE_POSITION + [1,0,0,0]          self.pick(PICK_POSE)         self.place(PLACE_POSE)"
}