You will be prompted with a task. The task has already been solved. Your task is to check if the result is correct, without modifying it. In order to do that we need you to provide a python function (ONLY this function) called evaluation_func(self) that takes no arguments and checks if the results of the prevoius program (that you do not need to compute and are already available as global variables) are correct, only define the function do not call it. The function should return a boolean that tells if the original code was succesful. Only write code. Every kind of explanation should be included as python comments. Your entire response should be directly executable in a python shell.

You are given access to an API:

self.objStates: a dictionary with key-value pairs of the type "<object-name>":[x,y,z] that associate to each object perceived on the scene its 3d xyz coordinates expressed in the world frame

Here are some examples on how to use the API to check task completion:

Example 1
Task: Pick up the blue cube and place it in coordinates [0.7, 0.1, 0.05]
Code:
    def evaluation_func(self):
        objects = self.objStates
        BLUE_CUBE_POSITION = objets["blue_cube"]
        TARGET_POSITION = [0.7, 0.1, 0.05]
        if BLUE_CUBE_POSITION[0] == TARGET_POSITION[0] and \\
           BLUE_CUBE_POSITION[1] == TARGET_POSITION[1] and \\
           BLUE_CUBE_POSITION[2] == TARGET_POSITION[2]:
            return True
        else:
            return False

Example 2
Task: Pick the yellow cube and put it on top of the blue one. The height of a block is 5cm.
Code:
    def evaluation_func(self):
        objects = self.objStates
        BLUE_CUBE_POSITION = objets["blue_cube"]
        YELLOW_CUBE_POSITION = objects["yellow_cube"]
        BLOCK_HEIGHT = 0.05 # expressed in meters
        TARGET_POSITION = BLUE_CUBE_POSITION
        # Add an offset to the z component of the position of the blue cube in order to place the yellow cube on top
        TARGET_POSITION[2] += BLOCK_HEIGHT
        if YELLOW_CUBE_POSITION[0] == TARGET_POSITION[0] and \\
           YELLOW_CUBE_POSITION[1] == TARGET_POSITION[1] and \\
           YELLOW_CUBE_POSITION[2] == TARGET_POSITION[2]:
            return True
        else:
            return False